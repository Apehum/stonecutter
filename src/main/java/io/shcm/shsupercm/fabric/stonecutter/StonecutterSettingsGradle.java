package io.shcm.shsupercm.fabric.stonecutter;

import org.gradle.api.initialization.ProjectDescriptor;
import org.gradle.api.initialization.Settings;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class StonecutterSettingsGradle {
    private final Settings settings;
    private final Set<ProjectDescriptor> versionedProjects = new HashSet<>();

    public StonecutterSettingsGradle(Settings settings) {
        this.settings = settings;
    }

    public void versioned(ProjectDescriptor project, String... versions) {
        if (!versionedProjects.add(project))
            throw new IllegalArgumentException("Project was already set to versioned");
        if (versions.length == 0)
            throw new IllegalArgumentException("Must have at least one version");

        final String activeVersion;

        project.setBuildFileName("stonecutter.gradle");
        try {
            final String versionsString = "'" + String.join("', '", versions) + "'";

            File stonecutterGradle = new File(project.getProjectDir(), "stonecutter.gradle");
            if (!stonecutterGradle.exists())
                Files.write(stonecutterGradle.toPath(),
                        """
                                // !!!! Do not edit this file !!!! \\\\
                                plugins {
                                    id 'io.shcm.shsupercm.fabric.stonecutter'
                                }
                                stonecutter.versions(%s)
                                stonecutter.current('%s')
                                """.formatted(versionsString, versions[0]).getBytes(), StandardOpenOption.CREATE);

            List<String> stonecutterLines = new ArrayList<>(Files.readAllLines(stonecutterGradle.toPath()));

            activeVersion = stonecutterLines.get(5).substring(21, stonecutterLines.get(5).length() - 2);

            if (!stonecutterLines.get(4).substring(21, stonecutterLines.get(4).length() - 1).equals(versionsString)) {
                Files.write(stonecutterGradle.toPath(),
                        """
                                // !!!! Do not edit this file !!!! \\\\
                                plugins {
                                    id 'io.shcm.shsupercm.fabric.stonecutter'
                                }
                                stonecutter.versions(%s)
                                stonecutter.current('%s')
                                """.formatted(versionsString, activeVersion).getBytes(), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        for (String version : versions) {
            String path = project.getPath() + ":" + version;
            settings.include(path);
            ProjectDescriptor versionedProject = settings.project(path);
            versionedProject.setProjectDir(new File(project.getProjectDir(), "/versions/" + version));
            versionedProject.setBuildFileName("../../build.gradle");
            versionedProject.setName((activeVersion.equals(version) ? "[ACTIVE] " : "") + version);
        }
    }
}
